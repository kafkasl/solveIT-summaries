>> Okay.

We're on.

Hi, John O'Rourke and special guest.

You get to be a special guest because it's your first time.

Isaac.

>> Hello.

>> Isaac is the creator of a really nice library of visual components for web apps called Monster UI.

Today, we're going to be talking about how to create web apps.

That's a pretty big topic.

So we won't cover everything today, but we will show some ways to get started and how to use a, or how, when and/how to use a Solv-It approach to do that, including using the Solv-It app, which is going to be very cutting edge latest stuff.

But it's worked surprisingly well when we've been trying it.

So before we get to doing stuff in the Solv-It app, we want to be able to do everything in the Solv-It app.

We're going to do most of it in the Solv-It app, and then we'll show you how to switch over to Visual Studio Code and kind of finish things off there.

We'll talk a bit about deploying as well to create your web app.

Before we do though, there's a lot of great systems nowadays to create a kind of an initial proof of concept or starting point or a landing page or one-off script you don't need to really build on much or whatever, which Jono's been spending a lot of time playing with.

And Jono, I understand your uncle has a business idea and you're hoping to utilize some of today's lesson.

We always like to take advantage of the time in the lesson to build other things that are on our to-do list as well.

So I know you've had some thoughts about that.

I don't know much about your uncle's business idea, but please tell us and show us how you would go about helping your uncle get started with his business idea. - This idea.

Yeah, so totally the real thing from my to-do list.

My uncle has this idea that he wants to do, he does kind of life coaching, business coaching, management stuff, and he's recently obtained a Sasquatch costume, so big foot.

Full suit, gloves, face, et cetera. - As you do. - As you do, but he doesn't have any kind of online presence yet.

And specifically he was thinking a good platform might be Oni fans.

He's heard vaguely that there's creators and other people on there that might be getting some income.

So he wants to try. - I always thought that was like some kind of soft porn thing, but I guess it's not just that.

It's also for Sasquatch life coaches. - I'll be honest, he would be in the minority of the content creators there and far more dressed. - But anyway, so-- - Sorry, just before we go on, why?

Okay, life coaching, I understand.

That's his thing, any particular reason to-- - Let's just say it was a Halloween costume that needs retroactive justification.

I think it might be the best way to explain it.

But anyway, we-- - When you first mentioned this to me the other day, I thought he was gonna do life coaching for Sasquatches, but this sounds like as a Sasquatch for humans. - As a Sasquatch for humans, exactly. - Okay, why not? - Okay, so this is the kind of situation that comes up all the time.

I'm sure you can all relate.

And so first thought is, cool, I bet there's lots of tools where I can just tell it what I want and it should create it.

And so this is the prompt that I've used to test out a number of these tools.

Create a stylish webpage for a Sasquatch life coach.

The premise is someone dressed has calls with you.

The call to action is to subscribe on OnlyFans, use this photo, it's a screenshot, make sure it's stylish, but bigfoot themed.

And then at the end here, I included the sometimes used vanilla HTML, JavaScript and CSS.

And if you're unfamiliar, we're gonna be looking at these.

These are kind of the building blocks of the web.

So this is a way of putting the content together. - And to be fair, like the Sasquatch does not appear to be dressed other than maybe a tie.

So it'll kind of my fit with OnlyFans. - It may well, yeah.

Okay, so without thinking too much more than that, I copied and pasted this into chatGPT.

And what it gave me back was as requested an HTML file.

Right, and so you can see-- - Was that was 4.0 or something? - I believe it was 01.

It must be the default when I opened the website.

It's put in some styling stuff here.

And don't worry if you don't recognize that as styling stuff, it's mostly colors and alignments and so on.

And then you'll recognize from our web scraping, we have these different tags in the HTML.

We have a header, Only Squatch, we have a paragraph describing what it is.

So this is a kind of like basic getting starting point.

This is not something that a website normally looks at.

This is the source code of said website.

So to host this, I've put it up on GitHub and I just have my index.html index is kind of a special name in web but usually is like the homepage or the root.

And so in the settings for this GitHub repo under pages, I've told it to deploy from the main branch.

And so if I go to janowetica.github.io/onlysquatch, which is the name of the repository, I see that index.html.

But now it's rendered by my browser.

It's got a nice colorful background. - So just going through that more slowly, how did that happen?

That all was a bit fast there.

So yeah, say that again.

So you got back, so like, ChapGPT would have just printed that HTML as a response, presumably.

And so what were the steps you did from there? - So I created a GitHub repository, like a folder for sharing code.

I went to create new file, right?

And I gave it a name and we said index is a kind of a special name, but I could call this my page. - And you can do this all through the GUI.

You can create a repo through the web GUI.

You can create the file through the web GUI.

So you don't even need to use a terminal for any of this. - So once I'm happy with that, I can commit those changes, create this page.

And then-- - So commit if probably most people have used GitHub if those who doesn't, it's like saving to your GitHub repository. - Exactly.

And so then by default, when you click on something in GitHub, it's gonna show you what that code looks like, right?

It's just gonna render it as text.

But if you want to share it with the wider world, GitHub has a built-in web hosting thing.

It says, look, if you have things like HTML files available that you wanna share, you can use something called GitHub Pages. - Which is really great.

We use that a lot.

So it's basically a free web hosting service for what's called static sites.

That's things where you don't have like, buttons and stuff and forms and things like that. - And so if I go to my page, there's my HTML. - Nice. - And it's turned by the browser into something visual for me. - And you didn't actually even need to know HTML in this case 'cause chat GPT wrote the HTML for you and you just pasted it in. - Exactly.

And so this is a very similar thing than what happened when I asked Claude. - So Claude, let's just look at that result again.

So the result is you do now have, you could be done.

If this is, you could ask your uncle, if this is satisfactory.

Does that subscribe to only fan button link to something or okay. - At the moment, it just pops up and says, "Hey, please visit and finish off the process there." - 'Cause I was saying, yeah, that was saying like, you know, this is for static pages.

I mean, a button like subscribe to only fans.

If only fans had, if you had, you know, a landing page set up there, I don't actually know if only fans were. - Zoom in. - And if I did, I wouldn't admit it, but yeah, that could link to your uncle's only fans landing page, I guess. - Exactly.

And so this could be perfectly serviceable.

If you just wanted to tell people, look, here's my phone number and my address for my local business, or you just needed to make some information available. - And this is not at all solvered because, I guess you could go back to chat GPT and say like, "Okay, I've hosted that."

And I don't like the fact that this is his color or this is too small.

Then you'd have to copy and then paste and then commit and then wait for it to rebuild the static site and then refresh. - It takes a few minutes.

Yeah. - Yeah. - Yeah, so it's not ideal. - But it's possible. - It's a decent start.

And kind of one step up from that is, if you ask the same question to Claude, they have something built in, which is they've said, look, creating this kind of like one-off dynamic user interface, is kind of cool to the point where they've built it into their dialogue.

So if you ask it to create a way. - And if you chat GPT has something called canvas, which I have not even used much, I must admit, but I think it's similar, right? - I don't know if it renders full websites.

It didn't last I checked, but that was right at the launch.

So maybe it does now.

So they'll have like a preview of what it looks like in the UI, but it's otherwise quite similar.

And so when I asked for, again, I asked for a page, it gave me back a webpage, but you'll see this one has a lot of kind of extra styling text.

It's using a library called-- - This was from Claude. - Yeah, and this was from Claude. - Are you able to show the artifact thing or? - I can show you what the result looks like, but I don't have the chat open and accessible.

Looks pretty nice, actually.

I'm very impressed, their use of tailwind and things.

It's really gone the next level.

It's even used a little footprint emoji all over the place, kind of the big foot theme.

And again, it just gave me some HTML that I could put on GitHub and host, but not always.

Sometimes Claude artifacts will use a special system that has some extra build steps, but especially if you just want to create something one-off that only you're going to look at, it's fantastic.

It's a really lovely experience.

As you can say, could you make the title text a bit bigger?

And actually, I need some testimonials, and it'll be able to iterate on those.

So it turns out there's a lot of people who've seen this flow and said, "You know what?

We could make this even better."

We could have immediate reviews and a way to host it and a way to not have to do GitHub pages and so on.

So I'm not going to go through all the different apps in their pros and cons.

I've made a little list with some notes, and I shared this in the Discord, but you can see the results here.

Sorry, I moved my Zoom out the way.

We have only Squatch.

This was from Versailles v0.

We have a very similar result from StackBlitz's bolt.new.

I'm guessing because they're both backed by Claude Sonnet, it really likes to say, "Let's get Squatchy."

Ready to get Squatchy.

You can see this is actually the same model being called by different services.

Here's one that was on a site called Val.town, which they have a way to integrate various services.

So for example, it generated its own image to use, but otherwise a very similar experience.

You describe the app you want and the app comes out.

Replit made a super stylish, very sleek, modern, dark mode websites using their Replit agent.

Again, same thing.

It's a prompt, what would you like to build?

I copied and pasted that same description of what I need.

Devon, the much hyped coding agent, made me a website and was able to share that, although I couldn't even very easily see the code without having to go through a number of steps.

Cerebrous Coder made it pretty glitchy one, but the magic trick with this is it took about half a second. - Devon costs 500 bucks a month and takes sometimes hours or even days. - Yeah, exactly.

So there's a whole range, a whole spectrum.

But yeah, I don't know, Jeremy, would you like to try one example of this? - Yeah, I've got one here.

I was just doing while you were talking, if you like. - Perfect, yeah. - Something strange just happened to my screen. - And we can't see the sharing, but while you're getting that, it's worth stepping back and saying how cool this is.

We have an idea and it took me probably less than an hour, including lots of faffing around and no taking, to make 12 different versions of that website with very little code experience required.

I could see someone non-technical, figuring out enough to type in what they want and then click the big white deploy button at the top right and then getting a URL that they can share with their friends.

So very, very magical experience. - I don't know.

My Mac is kind of got very confused.

And so possibly you'll lose me.

We might even lose the zoom for a moment.

So I just want to warn you here.

And try to at least do a false quit.

It's not even letting me do that, which I would have thought it's not command option escape.

To do a false quit.

This is the most broken I've ever seen a Mac.

I'm not even able to look up.

How to fix it.

Do you guys know false quit?

Is it command option? - I don't know on a Mac.

Sometimes, come on. - Yeah, option command escape should be doing it. - Okay.

Not good.

Hmm.

Hmm.

We can see your screen now. - You can see your screen change. - Okay.

That's, wow.

That, I don't know what happened.

Hmm.

Although, I might have to false quit.

I'll be back. - All right.

So Isaac, while we wait, do you have any, have you used any of these tools?

Do you have thoughts or opinions about which ones you really like? - You know, I've tried a few, but I think they're pretty cool.

I tried Bolt was the one that I used.

I thought it was pretty impressive what it built.

I spent a lot of time working with Devin as well.

There's a blog post on our site that is up there that Hamel did the majority of the work on, but yeah, those were the two.

And I think Bolt did a better job than Devin did. - Okay, I believe I'm back. - Yes, welcome back, Jeremy. - Apologies.

I don't know what happened that.

So, yeah.

I went into Claude and I typed, can you create a website for me with facts about Sasquatches?

Links to other page will create later for famous sightings.

And I linked to a new Sasquatch life coaching service.

And then it popped open this thing, which is, you know, one nice thing about this is I can, that's looking pretty good, but could you add a lot more big foot type themed pieces to it and make it look as fun and interesting as possible. - And so this kind of style is like, I guess I'd call it, iterative refinement, right?

You're not writing any code yourself, but you are going back and forth with the model who's serving as kind of like the intern slash web dev, picking your requirements and converting them into the code.

So it's a step up from just hoping that it works on the first time and being able to request these changes and then you can start to see how it works.

And then you can start to see how it works.

So I'm just going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page and I'm going to go back to the first page or we can write it ourselves.

We tend to need both of them and the thing I guess here with that replete one is it's going to be I mean, to be fair there are certainly people who write whole websites which they make money from only using the approach of prompting that's because that's the only way they know it's doable.

I'm not sure it's faster than an approach where you write some or all of the code yourself but for people who can't code at all it's particularly amazing because it gives them a power they previously didn't have.

I guess for people who can code yeah, we're showing we're going to show away after this it's going to be interesting to see what people think but we think it's a good way of combining the best of both worlds Yeah, and it's funny the people who can code really well and have done a million web projects can probably look at the ones we were showing and say "oh, I can immediately tell where to edit it" it's doing standard practices so they're also fine but we're going to try and show a different way, an iterative way when we can bring in some of the closer, faster feedback loops How did Replico anyway, did it make it?

It's still writing code I'll update it if it gets it working I'll keep an eye on it in the side It's checking away So, shall I demo the stuff we've been playing with recently?

Jono?

No worries This is going to be a bit tricky because I want to show how to do this in a reasonably independent way but at the same time we do have the creator of fasthtml here being me and the creator of MonsterUI here being Isaac so we won't entirely avoid leveraging those capabilities but let's see how we go So, I guess I'll share my screen and what I was going to do is something that I'm afraid to say is not so squash related but instead is to create a blog because inspired by something I saw from Isaac a couple of days ago where he was saying, hey, let's create a blog and he did it in Visual Studio Code and I thought, I wonder if I could do that and solve it So, I guess I'll create a dialogue called MonsterUI blog Actually, what I might do I let's do that, okay, MonsterUI blog and then to prepare for today's lesson I did a couple of things one was I grabbed a few blog posts from our blog which I just marked down and the other is I grabbed the Fast HTML language model context so let me show you how that works So, if you go to docs.fasthtml there's a section called getting help from AI and you can click from that and there's a file there which is basically a markdown version of our favorite docs I didn't paste it all in, I kind of kept scrolling down until the end of where I thought okay, that sounds like enough for a language model, should know what to do So, let's do the same thing here so I guess I don't know we don't need uploads so maybe what I'd do is I grab the whole thing paste it here and then delete quite a bit of it and we're not going to use websock at side there so cool looks like I need to slash doc at the end so I always kind of spend a bit of time kind of carefully curating my context oh and I can see this bit I don't need that's all about server side events authentication I don't need tosts I don't need alright, let's get rid of all that so the issue is generally speaking I like to paste some documentation about the libraries I doing into any language model I'm using so if I'm using clod I would use clod projects for that and with solvert I can pop it in here fast HTML intro oh you don't like hyphens okay paste there we go cool and then I did the same thing for the monster UI tutorial app so I'll post that in as well monster UI intro and so this will all be added basically to our context when we ask solvert questions about things yeah okay so I guess our starting point generally is just to tell ourselves and to tell solvert what we're going to do my plan for today is to create a simple blog the blog will use monster UI for styles and components and we'll use fast HTML as the framework it will have an index page with a list of posts each one with a preview image if there's a missing preview image in the source markdown front matter then we will just use a random one when you click on a blog posts read more button or on the image it will show the blog post there'll also be a navigation bar with an about button and a home button anything else we should add this is holia state the problem in your own words so you can think through what we need this looks like a reasonable description of most of what we want for a blog we could mention explicitly that part of our plan is to do this piece by piece but we will do this in small steps piece by piece and we will focus in this dialogue on creating the visual components rather than on the interactivity okay great cool okay can you demonstrate for me the basic idea of how I create and display some fast HTML components and set up whatever imports I need to make that happen oh don't do that so that's that's interesting so sometimes when you ask a when you ask one of these transcript tools for something you know to transcribe something instead of transcribing it it actually does it and that's happening here because I'm using this AI powered dictation this cleanup prompt now the cleanup prompt actually says you turn the cleaned up version of the transcript but it's just not used to this so I can just turn that off there we go alright please show me how to get started by importing the necessary stuff from fast HTML and display a couple of fast HTML components without creating any routes or anything at this point and so the downside is now it doesn't know about my special words and so to be explicit about what we're going to attempt here when we showed like remember the first page I showed there was the HTML that was like the source code of it and then there was GitHub pages which was in charge of actually like delivering that to the end user and similarly there was buttons that in that case didn't actually do anything but that eventually we'd hope would have some behavior so we're going to try and decouple this as much as possible and start with just the visual pieces what is the actual look of the page and can we build that up step by step rather than all at once and the goal is to be able to do that in the dialogue without having to you know save it out to an HTML file and load that somewhere each time without having to look at the whole page at once so Jeremy's trying to get the language model to start on that process I turned off learning mode so it might return more than we want which is fine so to try and get it into the mode that I do want so I'll go add message with code and so they've got kind of two separate bits here so nowadays we can press command shift-heifant to split that into two pieces so that's a bit more going on than I wanted so what I might do first is say let's say image equals that and then we'll say error equals that we'll say button equals that so this is kind of approach number one which is to start by asking the AI to do things for me now I'm not sure if in the context I provided it I actually told it how to display things but we'll see here this is all HTML that we've just created so to explain probably most of you know websites and web apps are created by creating HTML and having them output by a web server and then they appear on your browser and the browser turns that into stuff like you see here and so this is the HTML to show an image this is the HTML to show a paragraph this is the HTML to show a button these are a bit clunky to write and also they're not really possible to work with them programmatically in Python because they're just plain text so fast HTML which is I mean we're biased because we made it but I think we genuinely believe is the easiest way to write web application nowadays lets you instead of writing an HTML tag button you can write a Python function button instead of a p tag it's a p function instead of an image tag it's an image function but it's a one for one mapping right you can see here source equals source equals equals and when you just evaluate them in a dialogue and this also works in Jupyter Notebook as well it will show you the HTML much of the time what we actually want to do is to see how it renders so to see how it renders there's a thing called show as you see now we're kind of cheating here but we're cheating in a good way which is to say the ability to render these things correctly depends on the web page that you're using having the same styling framework as the things that you're rendering as it happens Solvit is written in fast HTML and uses MonsterUI's components and styling because we are in a web page right now that uses fast HTML and MonsterUI everything will look exactly correct and in fact show you can take multiple arguments so I could show the image I could show the para I could show the button there you go yeah Johnno or Isaac anything we should mention about you know the starting point for folks that haven't done web apps before I imagine this would be probably a bit intimidating yeah so there's a lot you can see oh Isaac you can see already all we've done is created an image the text and a button if you zoom in and look at the HTML code there's a lot of stuff already that's you know required some specialized knowledge like this pic some dot photos yes exactly this UK button UK button primary that's the stuff that makes the styling if you create a button without that it looks very ugly you know things like in the image like how do you get quick easy image to like prototype AI just happened to know that pic some dot photos is an API that can give you a random photo and it even told you showed you the slash 400 slash 200 that's that's going to be the dimensions of the image and so even though we haven't even really started building like a full quote unquote proper website there's a lot of there's a lot of knowledge built in and just making a button and showing a pic showing an image and a lot of that as you can see is just text strings that that normally you'd be writing if you aren't using you know fast HTML and we didn't even have to think about it at all because of monster UI so show is part of fast HTML and so everything I'm showing you so far actually would work perfectly well in a notebook as well and we are fairly intentionally trying to make it so that notebooks and solver are as similar as possible because we like to be able to export things to notebooks and gists and so forth and to me this is like the nicest kind of workspace I've ever used for playing around with building web things you know so like a couple of things I was playing with yesterday is like I could say for I comma f in enumerate h1 comma show f and you can see the ghost text here is helping me so this is going to go through each of these functions okay and again these are tags and actually it might be nice to what if we kind of said like you know let's say yeah exactly that isn't this great nice thank you ghost text print you know so it's going to go through each of these functions enumerate is going to give it an integer index of how many we've done as well as the function that we're doing and then we're going to evaluate that function and going to print it out and show it so there you go actually prints not quite what we want is it 2xml there's a special thing called 2xml that will do that rendering that we saw earlier so yeah you can see here and it looks like h5 and h6 are not supported at the moment in Monster UI so they don't look different and actually it's something else that I think is kind of fun is you don't even need to do this kind of coding like instead you can just say show h1 yeah that you know it's very good at helping you to play around and is one of the reasons this is so fun is that the loop between I wonder what a heading 2 looks like and I can see what a heading 2 looks like is nearly instant right like that's one of the main goals here is that oh and if I now want to put the heading together with an image and a piece of text and a button I can write a function that puts those together and then I can see straight away what that is so it's kind of keeping that iteration cycle as lean as thin as possible yeah it's it's amazing it really is now you know obviously if you're not using Monster UI or fast h2ml it's not going to be as convenient because there isn't another platform like this you know we have a couple of comments to that but firstly I'd say unless you're particularly tied to some other thing which a lot of people are please do try using fast h2ml in Monster UI because they're great but the other is we are going to hopefully expand this over time Solvert was built specifically to be a teaching tool for the Solvert course but over time we hope to expand it into something that's more of a development environment so we're giving a bit of a taste of maybe what's to come in the world as well as in the answer to the eyes world yeah so but you know the other thing to know about html is that things kind of create trees they're kind of nested so could you demonstrate creating a bunch of fast html components and sub-components including some of the ones we've used above but nested into something like a card or some other deeper element structure should say simple and you're not in learning mode it has that desire to be complicated still so let's see what we've got so we've got a card photos contents and it's kind of nice right because it knows we're trying to create a blog so you know it's trying to demonstrate more of the kind of stuff we're interested in so let's try that wow that's pretty sweet so you can see you know there's you know a card has in it a div, a div has in it an image, an h2 has in it some text this is a div that has in it some divs and that div has an image in it so that's what I mean by like a tree right if we said log preview without the show you can see it's just been rendering this or I think I think one thing that's nice to contrast if we go to that python code it's like we saw it when John was doing the previous version just how many files and it was like where do I edit things to me this feels like readable and manageable you can probably start to guess what does IMG do that's an image you can kind of start to guess a little bit about like okay this is a fascinating blog post there's a p tag you can guess what a button is some of the stuff like primary and secondary you aren't but it feels to me like this is a little bit more of an approachable starting point to like modify something you know than what kind of the agents that kind of created the really great websites there's a lot going on a lot of code okay so let's you know personally you know what we've been doing there isn't how I generally work you know how I generally work is I like to this is something we've talked about quite a bit in the course is if a AI produces some code that uses a library or technique or something that you are not personally familiar with my recommendation is you stop and go and read at least the quick start for you know that thing or the docs for that thing so if you you know if you have a used fast html before you know maybe go to the home page and like watch the video or go to the docs and read the by example and then ditto for monster UI again getting started and language model context files tutorial app so yeah that would be that would be what I would do and so in this case we are wanting to create a blog create a blog so I guess what that means is well the first thing we need to do then is we need our blog posts so we added yesterday or the day before recently this upload file button which lets me grab this zip file and that zip file nothing just happened did you delete your static folder so if anyone is wanting to try this no it just took a little while that's all okay if you would like to try this you do have to make the static folder that these will be uploaded to specifically you would type exclamation mark make the static to create the static folder that's where it's going to upload it to and that folder I just uploaded is just this one posts and it contains some markdown files and some images and so we should now find if I go ls static there we go it's unzipped it into that directory great so we could now do basically the solver approach from here so I'll skip over some of the asking AI to do things for me because obviously you can do that but I would be probably saying post file names equals actually maybe we'll first say path equals static and then we'll say oh from fastcore.utils import star okay and alright so then I would probably go post file names equals and it's actually done a pretty good job this would totally work I happen to know there's a better way to do it which is path.ls has a file extensions equals which is nice so then again we would immediately take a look at that possibly needs a dot okay needs a dot so again you can see like the solvered approach of like immediately look at the things you do that saved us a bug that might have been difficult later when we were like otherwise we'd just be like oh our home page is empty why is that so then I'd just say like okay file name equals post file names zero okay great so then I'd like have my post text and then I'd just hit right arrow and again okay that's looking pretty good okay I might rather print out because that way we'll be able to see the new lines and so this is a pretty standard way for folks to store blog posts this is called the front matter which is in yaml format and then mark down for the post itself so again you know a lot of people would probably just use AI to do this bit I'm actually going to find it a little bit faster just to do it myself I think which I'd say I'm going to split on triple underscore so before the first triple underscore is nothing at all so just chuck that in a little dummy variable then I've got the metadata and then I've got the post and and so this is pretty cool it's figured it out because you know even the ghost text model has access to the full context we should probably add a backslash in here as well let's just double check that looks okay looks pretty good how do I convert this into a dictionary and my hope is that now that it's seeing me do things more concisely hopefully it's now got enough context that it might start to yeah it's getting a bit more concise which is nice so I don't know why people have a tendency to create something then immediately return it just seems a bit strange to me um and since it's kind of a bit weird it decided to take a file name but then it only returned one piece of it so you should probably call this getPost and we should return the post as well um so I would say meta comma post and so hopefully that's now a dictionary getPost okay yeah so hopefully this is looking all like a pretty familiar kind of process um one thing we should mention about the upload is be careful not to upload large files if you go over quota we have no ability to auto delete the files that you don't care about so it's perfectly likely that the files that would end up getting deleted are the ones you most care about so yeah don't upload large files you've got 2gig to play with which is quite a lot um you can always check with the disk usage command um in human readable format star um and that will tell you um and if you just want to get a total you can just say du minus s for summary of the character directory um actually probably want that in human readable format as well so add an h um so as you can see not using up very much at all um okay so great um so yeah you know we can kind of start to build things up like this we've now got the text of the post um and I know Isaac there's like a render html render md to render markdown and monster ui which otherwise I guess I would search your documentation for um what's that going to return if I was to go oh and I guess we need to now uh no that should be fine so I guess we can now um why don't I see render md did we not import the right thing I think we did really we imported it it's a bit strange isn't it render oh I just press run all I don't know what happened oh do you know what I think I went back to the um main solvert dashboard um I didn't really run all when I came back yeah so what render md does is it um take markdown it's going to um convert it to html and then add a bunch of styling classes to it um it's got the quote and this is um actually these these classes that you see this is this you know fancier than I would write manually but because I render markdown a lot I spent a lot of time making these um you know uh pretty nice I think so wow that looks great so you see on the quotes for example on the left there's that little bit of blue that's gonna that's gonna always match your theme so if you're on dark theme or orange theme those'll those'll change a little bit same with the links we do have one issue here that this is called a shortcode which is um something so originally um well currently our answer ai blog is still corto we haven't converted it to fast html yet and it supports these things called shortcode so we need to support that um which I'm guessing ai will be able to do for us could you write a small concise function to handle shortcodes in a really reasonably general way and specifically including handling the video shortcode here so it includes a youtube iframe didn't quite get iframe right there did it and no this is why it's nice to have the cleanup step which my cleanup step in mac whisper I have pointing at the grok spec deck model which is insanely fast as we saw last time but I haven't actually had it do that accidentally show the whole answer before okay let's see okay so it's um so I always like to review any code that it writes for me if embed in url it's doing a bit more than I asked for oh I see it's doing a whole lot of checking and whatever else so I'd prefer to keep things in size so I don't go crazy with checking everything unless I know I really need it and the rest of this is just how yeah this is actually how youtube's stuff is meant to be done so that's good hang on what happened here oh I see this is the video handler call nice this is interesting it's wrapping it doesn't handle the multi-line strings very well no it's I think it'll work anyway but it's yeah okay that's kind of cool so what it's done is it's got a dictionary where it looks for certain things and basically when it finds it calls a particular function yeah it's not too bad it's I would have done it a bit better than that but I'm not going to do it again and then obviously oh yeah that's fine too and so it's using a regular expression and it's substituting it's starting for a pattern and then it's substituting that pattern with the result of calling this function this is a very this calling yeah and then this is quite nifty it's actually using a dictionary go through each one find a handler the handler will be a function and then re.sub actually calls the function to decide how to substitute it which is really actually quite nifty I don't love putting the import in there not terrible but um yeah let's try it I guess okay so do that um and do that split and do that cool um alright so we can now try that show renderMD handle short codes I should have probably waited because it was about to do it all for me thank you very much Quinn ah that's so cool so we're building up the blog but we're doing one little piece at a time and then seeing it right like that feels kind of fun there's lots of love in the chat Tramia lots of good positive comments a couple people asking like oh you know are there other ways if you've got something specific visual in mind so maybe like if you don't want to build it directly up from Monster or you don't know how to build it up from Monster or there are other alternatives to like get the fasthtml version of some component that you've seen or is the you think the best way is to like for Monster specifically and in fact for most of these kinds of frameworks you'll normally find um well in the reference there's certain things to kind of know to look for I look for containers I look for layout so layouts the thing which like defines how things are placed onto a page so here's a grid layout um or here's a div fully spaced layout or here's a centered layout here's a left aligned layout um you know containers of things you so go on on those docs like if you click that C source in any of them it'll flip and give you a little example code as well yeah and so you know articles and containers of things designed to kind of create nice spacing around things and then you know a bit of a special term of art is cards cards are the things that are generally often used to kind of like you know put little lines and stuff around things so you know actually this is pretty close to what we're going to want that would be totally cheating here's some more cards and the other thing is you'll often you know the thing I normally do is look at examples um so each of these is a full example which I know Isaac hasn't gotten around to adding the GUI for this yet but if you add so if I'm interested for example in this um this as a pretty nice one here Python first beautifully designed you can add code to the end of the URL I'm sure there'll be a button for this soon and I can search for monster dash do I search in the wrong thing I'll Python dash first find a monster first framework would also be great dash first there we go uh so yeah so here's the code to do that monster UI equals so I could probably just copy that for example and I think it's fair to say that this in web development even more than normal is a very common pattern for building up user interface pieces is finding things that look close to what you want and copying and pasting and adapting there are lots of libraries of UI examples there's lots of template sites and collections and you know even something like monster UI is a large collection of pieces that you can adapt and say okay what's the minimum tweak I need to do to this to change it from the example to my version with my text or my content or whatever oh I think I did okay yeah and I mean there's an example code as well there's multiple ways to use it you can use it as a reference in a starting point like this you can also use it as context you know if you want to build something card like but isn't exactly what's in there it could be a good thing to put in the context so you could do this more manually which would involve I mean this is still doing a lot of like if you did it in only tailwind you'd need way more classes than this so yeah this is saving us a whole lot of work and also these things are designed to all kind of work nicely together so it's a lot less fussing around as even time to time you add exact little bits of tailwind so for those that don't know tailwind is a it kind of like it converts CSS into something that doesn't live in style tags but instead it lives in class tags and it's kind of got this kind of higher level things so like space is not part of CSS part of tailwind so this says on the x-axis so left to right add one unit of spacing between elements which is why there's a little bit of spacing you could remove that and see the difference right like that's one that's like one main way to learn a lot of how this stuff works or how to tweak it is to add or remove pieces and see exactly in this case we've got a default that's fairly close but but yes if you look to the code even without it you'd see some space you'd see some space there I see cool and there is a spacing guide in the docs so if you're like I mean spacing is something that's really nice to get right if things look bunched or whatever oh I see guides so there's two right now so if you look at spacing there's these kind of four big concepts and it'll walk you through like what they are what are the abbreviations how does it work these are getting the spacing right can really make the site look really nice I try to have really good defaults but yeah so my main recommendation I think for people this week who are not very familiar with web app development would be to like go through this once to UI try these guides try experimenting with things in Solvert and you know try to get a feel so that you're not too reliant on the AI having said that the AI can do a lot for us so let's try it create a function which converts a meta dictionary into a blog post card that we could then use on our index page so I'm not really telling it very much there I was more oh fey with the details of monster UI like I said I'd probably give it a lot more guidance but you know let's see how it goes okay so it's got a default image of non provided um sounds hopeful okay so that's fine so we've got here text font dot muted so it made a guess based on what it's seen in the tutorial that there's probably a text font dot muted but so I can press here and see okay which one do I want for description, muted large, muted small or nothing at all?

muted small probably um and I should have added something at the top saying you know use a fast AI style guide and don't add lots of comments and all that kind of thing and use 150 character width because you know it's doing more pepate style formatting which I'm not a fan of it's not a big deal we should be adding at some point soonish more of a kind of universal system prompt type stuff you could add automatically so the picture for that is a screenshot which is a little confusing it is a little confusing and I think actually we want like width equals 400px or something like that I should probably use a double quote yeah so it's not amazing but it's a start I guess like in thinking about it for me probably I don't know starting with the AI one and then tuning it in some ways is kind of difficult compared to actually starting with like an example I think we saw there's a card right here which you know gosh that's super close it's almost kind of cheating right so you've got a label component so that's the thing that makes these nice little pure type things so that's piece one and then let's park this because we've only got 15 minutes and then look at piece two and then next week we'll put them together because piece two is actually creating the website piece does that sound reasonable?

yeah sounds great so far this is a nice way to build ui but it's like oh couldn't I just use one of those other bolt.devs why are we doing it in python I think it's nice to look at piece two of like oh okay let's start to see some other reasons this is convenient exactly so maybe we'll just start like exporting a few of the bits we want so we all want this I don't think we need too much just to get going we want this we want the file names call um function call let's go to that function that function is good okay and I mean we could even include this just so we've got something going so we'll say settings export download file I guess named up I and what lesson is that what we're calling it love lesson yes it is what we're calling it so I'll save it there save okay let's see if that appeared there it is there's our main.py okay so we're shifting out of Solvit because this is going to be relying on various pieces that aren't there yet and so we're switching over to in this case VS code but you could use whatever IDE you're familiar with and this is going to be something we'll talk about a lot more of like where do you run this app if you're you're wanting to deploy this somewhere and share it that kind of sysadmin devops is going to be something upcoming but for now we're going to be running it locally and previewing it that way yeah and we'll you know this is not the point at which I would switch to out of Solvit so next week we'll do a lot more in Solvit this is just a you know show kind of a sense of where we're going here so all I've done here is I've just opened up that main.py file and this folder locally I've got the same static folder with my markdown files and the images there and I've got the same context files as well so you know one thing that's kind of interesting actually is if you've got co-pilot installed and running which you probably want in Visual Studio or you could use cursor you know it kind of tells you press command i to ask co-pilot to do something or in fact you know when you credit your window don't show me that one I think it actually yeah you can see like these are the things that think are most important right command shift P, sharewall commands open chat control command i so if I hit control command i it brings up this chat which I want to clear out because that was from an earlier one how do I do that?

the plus for a new one?

got it cool so it's saying to me okay you want to ask co-pilot something and it's showing me that it's going to give co-pilot the current file and most of these kind of things have something like this at where you can give it other stuff in the context and I actually want to give it can I just say nope I can't just do that okay so you can say workspace yeah so maybe I'll open these guys as well and then we'll say ask about my workspace which I think will allow it to include everything and then I'll say please create a minimal fast HTML application with an index page that just prints hello world and is a complete application that I can run that's a bit of a worry it only included main.py well oh no it's got some stuff from oh that nice so this is quite nice I always like to check with these things what the references are to make sure it's including you know the right context and unfortunately they don't tend to include all the context which is a shame where else cloud projects and solvert do this is a big difference so it's only including little bits of stuff unfortunately but hopefully it's got enough so what I could do is I could I could just say insert a cursor so if I click that pop and of course you know again if you haven't used fast HTML before start here and you can see it's got basically exactly the same thing right so often just using the documentation sensibly is kind of safer I quite like doing in fast HTML I quite quite taking advantage of special function names so index is a special function name which refers to the home page and let's try it so this should and I think we've already imported fast HTML we have so we don't need that we've already made the app as well so we could get rid of those lines wait where do we make the app because that's part of that's part of the start I see cool great so we'll remove those so if we save that and then control tilde is the default keyboard shortcut that will bring up your terminal and then I could type python main.py oh no worries got it already running somewhere else yes I've got a local version of solver running let's try again and so what is this what's this doing here it's running my python program my program actually everything in here is just a function except for those lines of code and this line of code so this is a line of code from fast HTML that says run a web server and what the web server does is it looks for every function that has an RT decorator above it and it's going to make that available basically it's going to take the result which is fast HTML components and render it into the web browser and what happens on the main homepage well it uses this special function called index so if we go to this link see here it says link so I just press command and click it there you see okay and it's printing it in into our web browser we could go to the view source and the view source shows us that it's added a few things it's added HTML head body body it's created a main it's created a div class equals UK now tripping out for these UK things what does UK stand for Isaac UI kit it's one of the things that I guess I'll start one of the core the biggest core of monster UI is a framework called franken UI there's some other stuff in there but that's definitely by far the largest part if you go through the examples they'll look just like this and these actually originated this was inspired by the library called franken UI our shad scene if you go to shad scene you'll see the same examples it's kind of an iterative chain of building on top of other people that's the end of the react and franken UI is plain CSS and JavaScript and one of the things that franken UI uses UI kit yes go on sir exactly it uses UI kit it's not doing a one to one mapping from UI kit it's ported over and not everything is styled exactly the same but it does rely heavily on UI kit UK is UI kit styles cool and then there's a bunch of things here to try to handle for example light versus dark themes based on what the user's computer is set to so if my computer was set to dark theme it would handle that automatically is that right?

that's right yep and so we've kind of got to the point where just like I put my HTML in my GitHub and use GitHub pages to show that we've gotten to a point where we have some fast HTML that turns into HTML and we've now got a web server that's serving that up to you locally on your machine right so it's kind of like from there all the content that we built up in the server dialog we could show that if we wanted and yeah we now have the same like loop where okay we can't just do things interactively in the dialog but we can still make a change go and look at the change and we're back in that kind of more standard web dev world and you can see it's got some nice gray text as well powerful as the gray text you know it goes text that we use in Solver but it's pretty good so it's kind of guessing what I mean here which is nice I should have named this better let's see how it goes yeah so it's actually done a pretty good job there of guessing that I wanted to change this and so one thing that's quite nice here is it automatically notices changes so all I have to do is head back over here and refresh and you can see we started making things appear and you know you can also add here live equals true and what all that will do is it lets us not even have to refresh so what we tend to do is have both of our things visible oops wrong one or you could use two screens you know which can also be quite handy and so then we could say um if I now just save that you can see it pops up straight away without a refresh or anything which is kind of nice so you know what we were talking about earlier about for example changing spacing you know that maybe that's a good one here so if I change that to space y one press save you can see it changing straight away which is pretty cool and so yeah now we're very much in python land we're going to be able to add interesting things now blog is normally static right and so in a sense it might seem like a strange choice to demonstrate fast html to create a blog like why create a static thing but actually the interesting thing is that we're going to be exploring at n3ai is a new kind of blog where your blog could include fully interactive elements you know could include things that look stuff up in databases in real time you know could include stuff that let you run scientific simulations it could include stuff that call language models like you could write a post using a notebook or ideally using solvert you know and the whole thing is like an interactive experience so like this is kind of one of the reasons we showed this is to say like hey that's interesting because suddenly yeah maybe you don't need static site generators anymore and there's all sorts of projects that I've seen people sharing of like using solvert based on the embedding stuff we did to cluster Wikipedia articles or search the computer or you know all of those things it's very quick to see oh okay that was a cool solvert dialogue to read it'd be really amazing if I could like interact with that right if I could read not as a gist that's a you know a rendered Jupyter notebook but like oh here's a an actual dynamic thing where I can actually give a new topic and see those things cluster or you know upload my own photo and see that transformed or whatever the like thing that you're talking about is yeah I mean example would be oh no it's done that thing again I do I think it's interesting because the static sites you know they're nice because making web applications before was just so hard it felt like okay well how am I going to create a dynamic blog post and I think the fact that like we just kind of threw one together and you know very quickly and so we don't necessarily need it and if you look through the monster you I docs particularly like the guides the spacing and the the spacing guide and the layout tutorial those are fast HTML pages and you can see there's like rendered components there's hover effects that work if you make things smaller you know especially like on the grid page if you make things smaller they'll stack it's so it's responsive you know to mobile so it works well on mobile you can click it to flip and see the code versus the rendered and so there's a lot of things that are just you know really nice and all of those things I mentioned you know really wouldn't be possible on a static page I think I've got this working now mm-hmm okay some of the things from the fast HTML gallery perhaps a good example of this like I am not highly OFA with quantum computing but I could definitely imagine somebody who is would be interested in having you know in their blog post something where they could you know have one of these blocksphere a single quantum state things like sitting there written in Python you know or you know an SVG plots and stuff like that or yeah embedded PDFs audio whatever should be fun something we want to experiment with I feel yeah I've been feeling for months like the fact that the first that the N3I blog is a static site feels kind of embarrassing but so there's people asking us like why fast HTML like why did you guys even build fast HTML like what's and I think it's worth like before we end this lesson we're gonna dig more into the like nitty-gritty house and why is but the the big picture here again is is what like why are we interested in making websites at all why fast HTML what's the like what's the excitement here that's causes to include it in this course and to spend a lot of our time as AI researchers question mark doing web dev yeah so you know our our goal one of our goals is a company is to have 10 to 12 people and create somewhere around a thousand products that people like enough that they pay us more for them than the cost is to build so everything has to be really easy and fast to do that we think AI will help a lot with that but it's not just AI like everything about building a product should be smooth fast convenient experience and maintaining it you know debugging it so yeah we created fast HTML to you know basically because stuff like Django and next react and stuff like that kind of gotten too complicated and you know felt like next js had gone in the wrong direction where else Django hadn't modernized and so yeah we try you know basically we created a new framework because we felt there wasn't anything we were that we felt that if we used it we would achieve our company goal now all of that is to say this is somewhat orthogonal to the Solvert approach but the Solvert approach is about not writing very much code and being in control of that code and so forth so if for example if you use raw tailwind you know you're probably going to have a huge amount of code unless you use some you know again a high quality component library that wraps a lot of that and maybe view or felt or something but yeah in the end we we're trying to demonstrate I guess how we like building things and so we haven't found a great Solvert style way to build things for the web which is where most of us are going to be targeting so we're trying to make that and so yeah the folks listening watching this are we're trying to show what's next in our world and maybe what's next in your world and there's enough there that you can start to use it now but it's super early maybe once or this Solvert stuff becomes public more people will start building things with design for human in the loop you know maybe there'll be something like a replete agent or something like a towny in Val.Town or whatever that lets you do similar approaches with React and Next.js and so forth it'll be hard I mean Python is you know very unusual amongst popular modern languages at how well it's suited to this style it's much closer to Lisp or Smalltalk and for various reasons that's kind of necessary to make this work but yeah I guess it's definitely dramatically well what do you guys think I feel like it's dramatically increased our velocity of getting things out there compared to the pre-fast HTML days yeah I think it's things sped up a lot and I think it's it's just it's just nice you know a lot of a lot of times you know you've got you know before we had this framework you know I'd build something and it's like you know previous employers it's like oh let me hand that off to the software engineering team or let me let me talk to the designer to you know get a design that's always a long process and you know because it's so complicated you often have these specialists right that you that you almost need to talk to if you want anything to look good and we don't have any specialists as we discussed with Eric last time we were all in a different job title yeah I had an idea for like you know I was finding a lot of these things to make a twitter thread was frustrating and five or six hours later I had a full twitter thread thing that would save help me manage it save it in a SQLite database you know it's storage you know before I want to say more about that that was pretty funny and pretty great so Isaac said to me hey how do you create twitter threads I was like oh how am I going to get me onto this thing called typefully so I use typefully to create twitter threads it's kind of expensive I don't want to buy one for everybody in the company so it's like a waste of money but you know if you want to you know feel free to get a subscription and six hours later Isaac was like no I decided it would be better but I didn't like typefully so I decided to create my own and I'm done that's great and I never would have considered that before yeah it's crazy and you're not really a web app developer by background right you were working as a data scientist before I was working as a data scientist I got involved in web app when I started building the fast phtml gallery that was kind of my first I tried it several times before I just thought it was too hard and complicated to be honest so it was like it's not worth you know it wasn't what didn't feel worth it to me so yeah yeah all the frameworks are too hard and complicated so create your own framework much easier I'm afraid alright well that feels like a good place to leave it for now I think you know I think it would be helpful if the folks watching this could give us some feedback during the next couple of days about I mean I know for some people a lot of this will be way too simple for some people it's going to be way too complicated it's going to be hard to get a balance to everybody but I guess yeah next time we would like to finish this show how to build out the whole application in Solvert except for a few little button clicks finish it off in VS Code yes Isaac I'll be doing office hours shortly after so oh today right we'll be after right so after a place to give feedback after we finish this class if you head over to the discord voice chat you can talk to Isaac about Munster UI and fast html and using Solvert to help you with web apps and anything else so yeah so you'll be heading straight there after this basically is it the plan Isaac yeah it'll probably take me two or three minutes but yes I will I'll be right there I'll grab a glass of water set over alright um good luck to your uncle with a Sasquatch Onlyfans business Johnno I can't believe he was the first to come up with this obvious you know combination of it's an easy yes yep alright thanks everybody bye